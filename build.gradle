import proguard.gradle.ProGuardTask

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "com.guardsquare:proguard-gradle:${PROGUARD_VERSION}"
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'java-library'
}

group 'net.lortservers'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        url 'https://papermc.io/repo/repository/maven-public/'
    }
    maven {
        url 'https://repo.screamingsandals.org/public/'
    }
    maven {
        url 'https://repo.kcra.me/repository/maven-public/'
    }
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

configurations.all {
    // Check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    compileOnly "io.papermc.paper:paper-api:${PAPER_API_VERSION}"
    implementation "net.kyori:adventure-text-minimessage:${MINIMESSAGE_VERSION}"
    implementation "cloud.commandframework:cloud-minecraft-extras:${CLOUD_EXTRAS_VERSION}"
    api "org.screamingsandals.lib:core-bukkit:${SCREAMING_LIB_VERSION}"
    api "org.screamingsandals.lib:event-bukkit:${SCREAMING_LIB_VERSION}"
    api "org.screamingsandals.lib:tasker-bukkit:${SCREAMING_LIB_VERSION}"
    api "org.screamingsandals.lib:plugin-bukkit:${SCREAMING_LIB_VERSION}"
    api "org.screamingsandals.lib:command-bukkit:${SCREAMING_LIB_VERSION}"
    api "org.screamingsandals.lib:utils-common:${SCREAMING_LIB_VERSION}"
    annotationProcessor "org.screamingsandals.lib:screaming-annotation:${SCREAMING_LIB_VERSION}"

    implementation "me.zlataovce:hook:${HOOK_VERSION}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${JACKSON_VERSION}"
    compileOnly "org.checkerframework:checker-qual:${CHECKER_FRAMEWORK_VERSION}"
    compileOnly "org.projectlombok:lombok:${LOMBOK_VERSION}"
    annotationProcessor "org.projectlombok:lombok:${LOMBOK_VERSION}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${JUNIT_VERSION}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${JUNIT_VERSION}"
}

test {
    useJUnitPlatform()
}

shadowJar {
    relocate 'org.screamingsandals.lib', 'net.lortservers.iris.lib.slib'
    relocate 'com.fasterxml.jackson', 'net.lortservers.iris.lib.jackson'
    relocate 'cloud.commandframework.minecraft.extras', 'net.lortservers.iris.lib.cloudextras'
    relocate 'me.zlataovce.hook', 'net.lortservers.iris.lib.hook'
    relocate 'net.kyori.adventure', 'net.lortservers.iris.lib.adventure'
}

task('proguard', type: ProGuardTask) {
    dependsOn 'shadowJar'

    // You should probably import a more compact ProGuard-style configuration
    // file for all static settings, but we're specifying them all here, for
    // the sake of the example.
    //configuration 'configuration.pro'

    verbose

    // Specify the input jars, output jars, and library jars.
    // In this case, the input jar is the program library that we want to process.

    injars "build/libs/Iris-${project.version}-all.jar"
    outjars "build/libs/Iris-${project.version}-obf.jar"

    // Automatically handle the Java version of this build.
    if (System.getProperty('java.version').startsWith('1.')) {
        // Before Java 9, the runtime classes were packaged in a single jar file.
        libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
    } else {
        // As of Java 9, the runtime classes are packaged in modular jmod files.
        libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        //libraryjars "${System.getProperty('java.home')}/jmods/....."
    }

    // Save the obfuscation mapping to a file, so we can de-obfuscate any stack
    // traces later on. Keep a fixed source file attribute and all line number
    // tables to get line numbers in the stack traces.
    // You can comment this out if you're not interested in stack traces.

    ignorewarnings
    printmapping 'build/out.map'
    keepparameternames
    renamesourcefileattribute 'SourceFile'
    keepattributes 'Signature,Exceptions,InnerClasses,PermittedSubclasses,EnclosingMethod,Deprecated,SourceFile,LineNumberTable'

    // Preserve all annotations.

    keepattributes '*Annotation*'

    // Preserve all public classes, and their public and protected fields and
    // methods.

    keep 'public class * { \
        public protected *; \
    }'

    // Preserve all .class method names.

    keepclassmembernames 'class * { \
        java.lang.Class class$(java.lang.String); \
        java.lang.Class class$(java.lang.String, boolean); \
    }'

    // Preserve all native method names and the names of their classes.

    keepclasseswithmembernames includedescriptorclasses: true, 'class * { \
        native <methods>; \
    }'

    // Preserve the special static methods that are required in all enumeration
    // classes.

    keepclassmembers allowoptimization: true, 'enum * { \
        public static **[] values(); \
        public static ** valueOf(java.lang.String); \
    }'

    // Explicitly preserve all serialization members. The Serializable interface
    // is only a marker interface, so it wouldn't save them.
    // You can comment this out if your library doesn't use serialization.
    // If your code contains serializable classes that have to be backward
    // compatible, please refer to the manual.

    keepclassmembers 'class * implements java.io.Serializable { \
        static final long serialVersionUID; \
        static final java.io.ObjectStreamField[] serialPersistentFields; \
        private void writeObject(java.io.ObjectOutputStream); \
        private void readObject(java.io.ObjectInputStream); \
        java.lang.Object writeReplace(); \
        java.lang.Object readResolve(); \
    }'

    // Your library may contain more items that need to be preserved;
    // typically classes that are dynamically created using Class.forName:

    // keep 'public class com.example.MyClass'
    // keep 'public interface com.example.MyInterface'
    // keep 'public class * implements com.example.MyInterface'
}